variables:
  data_local: ???
  data_remote:  # If blank, files must be present in data_local
  max_seq_len: ???
  global_seed: ???

  # Run Name
  run_name:  # If left blank, will be read from env var $RUN_NAME

max_seq_len: ${variables.max_seq_len}
run_name: ${variables.run_name}

# Model
model:
  name: mpt_causal_lm
  init_device: meta
  d_model: ???
  n_heads: ???
  n_layers: ???
  expansion_ratio: ???
  max_seq_len: ${variables.max_seq_len}
  learned_pos_emb: false
  vocab_size: ???
  resid_pdrop: 0.0
  emb_pdrop: 0.0
  embedding_fraction: 1.0
  tie_word_embeddings: false
  no_bias: true
  norm_type: rmsnorm
  norm_eps: 1e-5
  logit_scale: ${eval:'1 / ${model._mup_config.d_model_ratio}'}
  fc_type: torch
  ffn_config:
    ffn_type: mptglu
    ffn_act_fn: 
      name: silu
  attn_config:
    attn_type: grouped_query_attention
    attn_impl: flash
    attn_pdrop: 0.0
    kv_n_heads: ???
    softmax_scale: ${eval:'(${model._mup_config.d_heads_base})**0.5 / ${model._mup_config.d_heads}'}
    qk_ln: false
    qk_gn: false
    fused_qkv: true
    clip_qkv: null
    attn_uses_sequence_id: false
    sliding_window_size: -1
    alibi: false
    rope: true
    rope_theta: 500000
    rope_impl: hf
    rope_hf_config:
      type: no_scaling
      factor: 1.0
  init_config:
    name: baseline_
    _init_std_base: ???
    init_std: ${eval:'${._init_std_base} / ${model._mup_config.d_model_ratio}**0.5'} # NB: make sure all the layers which receive this std are matrix like!
    init_div_is_residual: True # True: 1 / math.sqrt(2 * cfg.n_layers)
    emb_init_std: ${._init_std_base}
    unemb_init_std: ${._init_std_base}
  _mup_config: 
    d_model_base: ???
    n_heads_base: ???
    d_heads_base: ${eval:'${.d_model_base} / ${.n_heads_base}'}
    d_heads: ${eval:'${model.d_model} / ${model.n_heads}'}
    d_model_ratio: ${eval:'${model.d_model} / ${.d_model_base}'} 
    eps_base: ???
    matrix_like_params: # NB: add/remove `gate_proj` entry depending on ffn_type!
      - param_str_match: attn.Wqkv.weight
        lr: ${eval:'${optimizer.lr} / ${model._mup_config.d_model_ratio}'}
        eps: ${eval:'${model._mup_config.eps_base} / ${model._mup_config.d_model_ratio}'}
        weight_decay: ${eval:'${optimizer.weight_decay} * ${model._mup_config.d_model_ratio} if "decoupled" not in "${optimizer.name}" else ${optimizer.weight_decay}'}
      - param_str_match: attn.out_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model._mup_config.d_model_ratio}'}
        eps: ${eval:'${model._mup_config.eps_base} / ${model._mup_config.d_model_ratio}'}
        weight_decay: ${eval:'${optimizer.weight_decay} * ${model._mup_config.d_model_ratio} if "decoupled" not in "${optimizer.name}" else ${optimizer.weight_decay}'}
      - param_str_match: ffn.up_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model._mup_config.d_model_ratio}'}
        eps: ${eval:'${model._mup_config.eps_base} / ${model._mup_config.d_model_ratio}'}
        weight_decay: ${eval:'${optimizer.weight_decay} * ${model._mup_config.d_model_ratio} if "decoupled" not in "${optimizer.name}" else ${optimizer.weight_decay}'}
      - param_str_match: ffn.down_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model._mup_config.d_model_ratio}'}
        eps: ${eval:'${model._mup_config.eps_base} / ${model._mup_config.d_model_ratio}'}
        weight_decay: ${eval:'${optimizer.weight_decay} * ${model._mup_config.d_model_ratio} if "decoupled" not in "${optimizer.name}" else ${optimizer.weight_decay}'}
      - param_str_match: ffn.gate_proj.weight
        lr: ${eval:'${optimizer.lr} / ${model._mup_config.d_model_ratio}'}
        eps: ${eval:'${model._mup_config.eps_base} / ${model._mup_config.d_model_ratio}'}
        weight_decay: ${eval:'${optimizer.weight_decay} * ${model._mup_config.d_model_ratio} if "decoupled" not in "${optimizer.name}" else ${optimizer.weight_decay}'}

# Tokenizer
tokenizer:
  name: ???
  kwargs:
    model_max_length: ${variables.max_seq_len}
    use_fast: false

# Dataloaders
train_loader:
  name: text
  dataset:
    local:
    remote:
    split: train
    shuffle: true
    max_seq_len: ${variables.max_seq_len}
    shuffle_seed: ${variables.global_seed}
    epoch_size: ${eval:'10000000000000 / ${variables.max_seq_len}'}
    streams:
      afr:
        local: "${variables.data_local}/afr"
        proportion: 0.001352385557433215
      code:
        local: "${variables.data_local}/code-fast"
        proportion: 0.30796839684273686
      dan:
        local: "${variables.data_local}/dan"
        proportion: 0.026670310486060417
      deu:
        local: "${variables.data_local}/deu-fast"
        proportion: 0.18943002978106832
      eng:
        local:  "${variables.data_local}/eng-fast"
        proportion: 0.3482448942858498
      fao:
        local:  "${variables.data_local}/fao"
        proportion: 8.52162600850915e-05
      fry:
        local:  "${variables.data_local}/fry"
        proportion: 5.4024485718372014e-05
      gsw: ## NB: for gsw only train split exists
        local:  "${variables.data_local}/gsw"
        proportion: 4.926151316429887e-08
      isl:
        local:  "${variables.data_local}/isl"
        proportion: 0.007897999882605708
      lim:
        local:  "${variables.data_local}/lim"
        proportion: 8.771628187817968e-06
      ltz:
        local:  "${variables.data_local}/ltz"
        proportion: 5.117039679941545e-06
      nds:
        local:  "${variables.data_local}/nds"
        proportion: 2.4733384734575056e-06
      nld:
        local:  "${variables.data_local}/nld-fast"
        proportion: 0.06885193947903728
      nno:
        local:  "${variables.data_local}/nno"
        proportion: 0.0007914016032073252
      nob:
        local:  "${variables.data_local}/nob"
        proportion: 0.0146845697154507
      nor:
        local:  "${variables.data_local}/nor"
        proportion: 0.00270379204229229
      swe:
        local:  "${variables.data_local}/swe"
        proportion: 0.031248628310600237
  drop_last: true
  num_workers: ???
  prefetch_factor: 2

eval_loader:
  - name: text
    label: ALL
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        afr:
          local: "${variables.data_local}/afr"
          repeat: 1
        code:
          local: "${variables.data_local}/code-fast"
          repeat: 1
        dan:
          local: "${variables.data_local}/dan"
          repeat: 1
        deu:
          local: "${variables.data_local}/deu-fast"
          repeat: 1
        eng:
          local:  "${variables.data_local}/eng-fast"
          repeat: 1
        fao:
          local:  "${variables.data_local}/fao"
          repeat: 1
        fry:
          local:  "${variables.data_local}/fry"
          repeat: 1
        # gsw: ## NB: val split it's empty, so we skip it
        #   local:  "${variables.data_local}/gsw"
        #   repeat: 1
        isl:
          local:  "${variables.data_local}/isl"
          repeat: 1
        lim:
          local:  "${variables.data_local}/lim"
          repeat: 1
        ltz:
          local:  "${variables.data_local}/ltz"
          repeat: 1
        nds:
          local:  "${variables.data_local}/nds"
          repeat: 1
        nld:
          local:  "${variables.data_local}/nld-fast"
          repeat: 1
        nno:
          local:  "${variables.data_local}/nno"
          repeat: 1
        nob:
          local:  "${variables.data_local}/nob"
          repeat: 1
        nor:
          local:  "${variables.data_local}/nor"
          repeat: 1
        swe:
          local:  "${variables.data_local}/swe"
          repeat: 1
    drop_last: false
    num_workers: 2
    prefetch_factor: 2
  - name: text
    label: ENG
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        eng:
          local:  "${variables.data_local}/eng-fast"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: CODE
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        code:
          local: "${variables.data_local}/code-fast"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: DEU
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        deu:
          local: "${variables.data_local}/deu-fast"
          repeat: 1
        ## NB: val split is empty, so we skip it
        # gsw:
        #   local:  "${variables.data_local}/gsw"
        #   repeat: 1
        ltz:
          local:  "${variables.data_local}/ltz"
          repeat: 1
        nds:
          local:  "${variables.data_local}/nds"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: NLD
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        nld:
          local:  "${variables.data_local}/nld-fast"
          repeat: 1
        afr:
          local: "${variables.data_local}/afr"
          repeat: 1
        fry:
          local:  "${variables.data_local}/fry"
          repeat: 1
        lim:
          local:  "${variables.data_local}/lim"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: SWE
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        swe:
          local:  "${variables.data_local}/swe"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: DAN
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        dan:
          local: "${variables.data_local}/dan"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: NOR
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        nob:
          local:  "${variables.data_local}/nob"
          repeat: 1
        nor:
          local:  "${variables.data_local}/nor"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: NNO
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        nno:
          local:  "${variables.data_local}/nno"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: ISL
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        isl:
          local:  "${variables.data_local}/isl"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2
  - name: text
    label: FAO
    dataset:
      local:
      remote:
      split: val
      shuffle: false
      max_seq_len: ${variables.max_seq_len}
      shuffle_seed: ${variables.global_seed}
      epoch_size: null # will be set to the sum of streams
      streams:
        fao:
          local:  "${variables.data_local}/fao"
          repeat: 1
    drop_last: false
    num_workers: 1
    prefetch_factor: 2

# Optimization
scheduler:
  name: ???
  t_warmup: ???
  t_constant: ???
  t_decay: ???
  alpha_c: 1.0
  alpha_f: ???

optimizer:
  name: ???
  lr: ???
  betas: ???
  weight_decay: ???
  eps: ${model._mup_config.eps_base}
  param_groups: ${model._mup_config.matrix_like_params}

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: ???
eval_interval: ???
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: ???

# System
seed: ${variables.global_seed}
device_eval_batch_size: ???
device_train_microbatch_size: ???
# device_train_microbatch_size: auto
precision: ???

# FSDP
fsdp_config:
  sharding_strategy: ???
  state_dict_type: sharded
  mixed_precision: PURE
  activation_checkpointing: false
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  optimizer_monitor:
    log_optimizer_metrics: true
    batch_log_interval: 1
  # memory_monitor: {}
  # runtime_estimator: {}

loggers:
  mlflow:
    tracking_uri: ???
    experiment_name: ???
    run_name: ${run_name}
    resume: ???
    ignore_hyperparameters: []
  tensorboard:
    log_dir: ???
    flush_interval: 10

# Checkpoint to local filesystem or remote object store
save_interval: ???
save_overwrite: ???
save_num_checkpoints_to_keep: ???
save_folder: ???
save_weights_only: false

# Load from local filesystem or remote object store
load_path: ???
